// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


enum Role{
  CLIENT
  BARBER
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user{
  id Int @id @default(autoincrement())
  name String
  email String @unique
  password String

  phone String
  role Role @default(CLIENT)

  //se Role for igual a BARBER
  barberProfile barber?

  //Se Role for igual a Client
  clientProfile client?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
}
model barber {
  id Int @id @default(autoincrement())
  userId Int @unique
  user user @relation(fields: [userId], references: [id])

  costumerService CostumerService[]
  feedBack feedBack[]
}

model client {
  id       Int       @id @default(autoincrement())
  
  userId Int @unique
  user user @relation(fields: [userId], references: [id])

  costumerService CostumerService[]
  plan     plan?
  feedback feedBack?
}

model plan {
  id            Int     @id @default(autoincrement())
  value         Decimal
  haircutNumber Int
  client        client  @relation(fields: [idClient], references: [id])
  idClient      Int     @unique
}

model feedBack {
  id       Int    @id @default(autoincrement())
  rating   Int
  comment  String
  client   client @relation(fields: [idClient], references: [id], onDelete: Cascade)
  idClient Int    @unique
  barber   barber @relation(fields: [idBarber], references: [id], onDelete: Cascade)
  idBarber Int    @unique
}

model CostumerService{
  id Int @id @default(autoincrement())
  client client @relation(fields: [clientId], references: [id])
  clientId  Int 
  barber barber @relation(fields: [barberId], references: [id])
  barberId Int 
  ServiceTime DateTime
  isPaid Boolean
  Services ServiceOnCostumerService[]
  
}

model Service{
  id Int @id @default(autoincrement())
  description String
  CostumerServices ServiceOnCostumerService[]
}

model ServiceOnCostumerService{
  @@id([costumerServiceId, serviceId])
  costumerServiceId Int
  serviceId Int

  costumerService CostumerService @relation(fields: [costumerServiceId], references: [id], onDelete: Cascade)

  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}