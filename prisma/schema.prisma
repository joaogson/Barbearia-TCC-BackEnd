// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


enum Role{
  CLIENT
  BARBER
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User{
  id Int @id @default(autoincrement())
  name String
  email String @unique
  password String

  phone String
  role Role @default(CLIENT)

  //se Role for igual a BARBER
  barberProfile Barber?

  //Se Role for igual a Client
  clientProfile Client?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
}
model Barber {
  id Int @id @default(autoincrement())
  userId Int @unique
  user User @relation(fields: [userId], references: [id])

  workStartTime String @default("08:00")
  workEndTime String @default("19:00")

  breakBetweenCostumerService Int @default(0)

  inactivePeriods InactivePeriod[]

  costumerService CostumerService[]
  feedBack FeedBack[]
}
model InactivePeriod {
  id Int @id @default(autoincrement())
  date DateTime
  startTime String
  endTime String
  barbedId Int
  barber Barber @relation(fields: [barbedId], references: [id])
}

model Client {
  id       Int       @id @default(autoincrement())
  
  userId Int @unique
  user User @relation(fields: [userId], references: [id])

  costumerService CostumerService[]
  plan     Plan?
  feedback FeedBack?
}

model Plan {
  id            Int     @id @default(autoincrement())
  value         Decimal
  haircutNumber Int
  client        Client  @relation(fields: [clientId], references: [id])
  clientId      Int     @unique
}

model FeedBack {
  id       Int    @id @default(autoincrement())
  rating   Int
  comment  String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId Int    @unique
  barber   Barber @relation(fields: [barberId], references: [id], onDelete: Cascade)
  barberId Int    @unique
}

model CostumerService{
  id Int @id @default(autoincrement())
  client Client @relation(fields: [clientId], references: [id])
  clientId  Int 
  barber Barber @relation(fields: [barberId], references: [id])
  barberId Int 
  ServiceTime DateTime
  totalDuration Int
  isCancelled Boolean @default(false)
  Services ServiceOnCostumerService[]
  
}

model Service{
  id Int @id @default(autoincrement())
  description String
  CostumerServices ServiceOnCostumerService[]
  duration Int
}

model ServiceOnCostumerService{
  @@id([costumerServiceId, serviceId])
  costumerServiceId Int
  serviceId Int

  costumerService CostumerService @relation(fields: [costumerServiceId], references: [id], onDelete: Cascade)

  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}